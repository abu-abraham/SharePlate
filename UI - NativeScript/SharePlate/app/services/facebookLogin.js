"use strict";
var tnsOAuthModule = require("nativescript-oauth");
var http = require("http");
var UserDetails = (function () {
    function UserDetails(id, name, url, email, birthday, loc, work, education) {
        this.id = id;
        this.name = name;
        this.picture_url = url;
        this.email = email;
        this.birthday = birthday;
        this.work = work;
        this.location = loc;
        this.education = education;
    }
    return UserDetails;
}());
var FacebookLogin = (function () {
    function FacebookLogin() {
    }
    FacebookLogin.prototype.get_latest_school = function (schools) {
        var current_year = new Date().getFullYear();
        var school = "None";
        for (var i = 0; i < schools.length; i++) {
            try {
                var details = schools[i];
                var year = details.year.name;
                if (current_year <= year) {
                    school = details.school.name;
                }
            }
            catch (ex) {
                console.log("Error " + ex);
            }
        }
        return school;
    };
    FacebookLogin.prototype.get_latest_work = function (works) {
        var current_date = new Date();
        var organization = "None";
        for (var i = 0; i < works.length; i++) {
            try {
                var details = works[i];
                var end_date = details.end_date;
                if (current_date <= end_date) {
                    organization = details.employer.name;
                }
            }
            catch (ex) {
                console.log("Error " + ex);
            }
        }
        return organization;
    };
    FacebookLogin.prototype.get_details_in_required_format = function (obj) {
        return (new UserDetails(obj.id, obj.name, encodeURIComponent(obj.picture.data.url), obj.email, obj.birthday, obj.location.name, this.get_latest_work(obj.work), this.get_latest_school(obj.education)));
    };
    FacebookLogin.prototype.bypass_login = function () {
        var p = new Promise(function (resolve, reject) {
            resolve("Done");
        });
        return p;
    };
    FacebookLogin.prototype.login = function () {
        var _this = this;
        var p = new Promise(function (resolve, reject) {
            tnsOAuthModule.login().then(function () {
                console.log("Logged IN");
                _this.accessToken = tnsOAuthModule.accessToken();
                //EAAXnPkHxW28BALZCsH4uNNpxkE7DiPFlXWhz7a9gIKZAcTslOkhnNIIwaEsCUqhhz7cl8FV7WkPfrmRZBtp6AAz8WjbJMC2dws0tM1pZAG2HA5wvxRphbXrlG7vwKh5QAYfwgVsm0e3dQXvLE6iaoPFC0WDiUeTv910B0od7uAZDZD
                http.getJSON("https://graph.facebook.com" + "/me?fields=id,name,picture,email,birthday,work,location,education&access_token=" + tnsOAuthModule.accessToken())
                    .then(function (res) {
                    console.log("Got all info required");
                    FacebookLogin.userDetails = _this.get_details_in_required_format((res));
                    console.log(JSON.stringify(FacebookLogin.userDetails));
                    fetch("https://1d01b2d2.ngrok.io/login/" + JSON.stringify(FacebookLogin.userDetails))
                        .then(function (r) {
                        resolve(r);
                    })
                        .catch(function (error) {
                        console.log(error);
                        reject(error);
                    });
                });
            });
        });
        return p;
    };
    FacebookLogin.prototype.getUserDetails = function () {
        return FacebookLogin.userDetails;
    };
    return FacebookLogin;
}());
module.exports = new FacebookLogin();
//# sourceMappingURL=data:application/json;base64,